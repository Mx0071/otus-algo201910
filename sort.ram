; <input> 5 4 3 0 2 1
; <input> 8 0 1 2 3 4 5 6 7
; <input> 8 7 6 5 4 3 2 1 0
; <input> 0
; <input> 1 8
; <input> 7 7 7 7 7 7 7 7
<input> 8 1 0 1 0 1 0 1 0

; read
read 0
jz stop

store 1; r1 = N
store 2; r2 - iterator
load=6
store 3; address for next element

next:
  read *3
  load 3
  add =1
  store 3
  load 2
  sub =1
  store 2
jgtz next


load=6
store 2 ; r2 - index i
store 3  ; r3 - index k
add 1
store 4 ; r4 = N for index k
sub=1
store 1 ; r1 = N-1 for index i

LOOP_I:
  load 2
  sub 1
  jz print
  load 2
  add=1
  store 3
  LOOP_J:
      sub 1
      jgtz LOOP_J_EXIT  ; if k < N - 1
      load *2
      sub *3
      jgtz swap
      inc:
        load 3
        add =1
        store 3 ; r3+=1
        jmp LOOP_J
      swap:  ; *r2 <=> *r3
        load *2
        store 5
        load *3
        store *2
        load 5
        store *3
        jmp inc
   LOOP_J_EXIT:
     load 2
     add =1
     store 2 ; r2+=1
     jmp LOOP_I
; для каждого i от 0 до N-1
; для каждого k от i+1 до N-1
; если элемент[i] > элемент[k]
;    элемент[k] <=> элемент[i];

print:
  load=6
  store 1 ; iterator for sorted elements
  loop:
    load 1
    sub 4
    jz stop
    load *1
    write 0
    load 1
    add=1
    store 1
    jmp loop

stop:
  halt